<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.exam.registration.mapper.OrderMapper">
  <resultMap id="BaseResultMap" type="com.exam.registration.model.Order">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="student_id" jdbcType="BIGINT" property="studentId" />
    <result column="exam_id" jdbcType="BIGINT" property="examId" />
    <result column="cost" jdbcType="DECIMAL" property="cost" />
    <result column="examinee_number" jdbcType="CHAR" property="examineeNumber" />
    <result column="order_number" jdbcType="CHAR" property="orderNumber" />
    <result column="is_paid" jdbcType="BIT" property="isPaid" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="is_deleted" jdbcType="BIT" property="isDeleted" />
  </resultMap>
  <sql id="Base_Column_List">
    id, student_id, exam_id, cost, examinee_number, order_number, `is_paid`, create_time, 
    update_time, is_deleted
  </sql>
  <select id="countOrders" parameterType="java.util.Map" resultType="java.lang.Long">
    select count(*) from `order`
    <where>
      <if test="keyword != null and keyword != ''">
        id = #{keyword,jdbcType=BIGINT}
      </if>
    </where>
  </select>
  <select id="countPaidOrders" resultType="java.lang.Long">
    select count(*) from `order`
    where
        is_paid = 1
  </select>
  <select id="countOrdersByExamId" parameterType="java.lang.Long" resultType="java.lang.Long">
    select count(*) from `order`
    <where>
      <if test="keyword != null and keyword != ''">
        exam_id = #{examId,jdbcType=BIGINT}
      </if>
    </where>
  </select>
  <select id="listOrders" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from `order`
    where is_deleted = 0
  </select>
  <select id="listPaidOrders" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from `order`
    where is_deleted = 0
    and is_paid = 1
  </select>
  <select id="listOrdersByPage" parameterType="java.util.Map" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from `order`
    <where>
      <if test="keyword != null and keyword != ''">
        id = #{keyword,jdbcType=BIGINT}
      </if>
      <if test="studentId != null and studentId != ''">
        or
        student_id = #{studentId,jdbcType=BIGINT}
      </if>
    </where>
    limit #{currentIndex}, #{pageSize}
  </select>
  <select id="listOrdersByStudentId" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from `order`
    where student_id = #{studentId,jdbcType=BIGINT}
  </select>
  <select id="listPaidOrdersByStudentId" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from `order`
    where student_id = #{studentId,jdbcType=BIGINT}
    AND `is_paid` = 1
  </select>
  <select id="getPaidOrderOrderByExamId" parameterType="java.lang.Long" resultType="Map">
    select count(*) `count`, exam_id from `order` where is_paid = 1 group by exam_id order by `count`
  </select>
  <select id="listUnPaidOrdersByStudentId" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from `order`
    where student_id = #{studentId,jdbcType=BIGINT}
    AND `is_paid` = 0
  </select>
  <select id="getOrderByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from `order`
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="getOrderByOrderNumber" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from `order`
    where order_number = #{orderNumber,jdbcType=CHAR}
  </select>
  <delete id="deleteOrderByPrimaryKey" parameterType="java.lang.Long">
    delete from `order`
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteOrderByPrimaryKeys" parameterType="java.lang.String">
    delete from `order`
    where id in (${ids})
  </delete>
  <insert id="insertOrder" parameterType="com.exam.registration.model.Order">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into `order` (student_id, exam_id, cost,
      examinee_number, order_number, `is_paid`, 
      create_time, update_time, is_deleted
      )
    values (#{studentId,jdbcType=BIGINT}, #{examId,jdbcType=BIGINT}, #{cost,jdbcType=DECIMAL}, 
      #{examineeNumber,jdbcType=CHAR}, #{orderNumber,jdbcType=CHAR}, #{isPaid,jdbcType=BIT}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{isDeleted,jdbcType=BIT}
      )
  </insert>
  <insert id="insertOrderSelective" parameterType="com.exam.registration.model.Order">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into `order`
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="studentId != null">
        student_id,
      </if>
      <if test="examId != null">
        exam_id,
      </if>
      <if test="cost != null">
        cost,
      </if>
      <if test="examineeNumber != null">
        examinee_number,
      </if>
      <if test="orderNumber != null">
        order_number,
      </if>
      <if test="isPaid != null">
        `is_paid`,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="isDeleted != null">
        is_deleted,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="studentId != null">
        #{studentId,jdbcType=BIGINT},
      </if>
      <if test="examId != null">
        #{examId,jdbcType=BIGINT},
      </if>
      <if test="cost != null">
        #{cost,jdbcType=DECIMAL},
      </if>
      <if test="examineeNumber != null">
        #{examineeNumber,jdbcType=CHAR},
      </if>
      <if test="orderNumber != null">
        #{orderNumber,jdbcType=CHAR},
      </if>
      <if test="isPaid != null">
        #{isPaid,jdbcType=BIT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isDeleted != null">
        #{isDeleted,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <update id="updateOrderByPrimaryKeySelective" parameterType="com.exam.registration.model.Order">
    update `order`
    <set>
      <if test="studentId != null">
        student_id = #{studentId,jdbcType=BIGINT},
      </if>
      <if test="examId != null">
        exam_id = #{examId,jdbcType=BIGINT},
      </if>
      <if test="cost != null">
        cost = #{cost,jdbcType=DECIMAL},
      </if>
      <if test="examineeNumber != null">
        examinee_number = #{examineeNumber,jdbcType=CHAR},
      </if>
      <if test="orderNumber != null">
        order_number = #{orderNumber,jdbcType=CHAR},
      </if>
      <if test="isPaid != null">
        `is_paid` = #{isPaid,jdbcType=BIT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isDeleted != null">
        is_deleted = #{isDeleted,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateOrderByPrimaryKey" parameterType="com.exam.registration.model.Order">
    update `order`
    set student_id = #{studentId,jdbcType=BIGINT},
      exam_id = #{examId,jdbcType=BIGINT},
      cost = #{cost,jdbcType=DECIMAL},
      examinee_number = #{examineeNumber,jdbcType=CHAR},
      order_number = #{orderNumber,jdbcType=CHAR},
      `is_paid` = #{isPaid,jdbcType=BIT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      is_deleted = #{isDeleted,jdbcType=BIT}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>